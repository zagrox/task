#!/bin/bash
# .git/hooks/pre-commit
# Purpose: Validate commits for code quality and version control consistency

# Store the exit status
EXIT_STATUS=0

echo "Running pre-commit validation..."

# Check if Laravel is installed
if [ -f "artisan" ]; then
  # Run Laravel tests if they exist
  if [ -d "tests" ]; then
    echo "Running Laravel tests..."
    
    # Run with optimizations - parallel if available
    if php artisan help | grep -q "test.*--parallel"; then
      php artisan test --parallel 2>/dev/null
    else
      php artisan test 2>/dev/null
    fi
    
    TEST_STATUS=$?
    if [ $TEST_STATUS -ne 0 ]; then
      echo "❌ Tests failed. Commit aborted."
      EXIT_STATUS=1
    else
      echo "✅ Laravel tests passed"
    fi
  else
    echo "ℹ️ No tests directory found, skipping tests"
  fi
else
  echo "ℹ️ Not a Laravel project, skipping Laravel-specific checks"
fi

# Run migration status check
if [ -f "scripts/ensure-migrations.sh" ]; then
  echo "Checking for uncommitted migrations..."
  bash ./scripts/ensure-migrations.sh
  
  MIGRATION_STATUS=$?
  if [ $MIGRATION_STATUS -ne 0 ]; then
    echo "❌ Migration check failed"
    EXIT_STATUS=1
  else
    echo "✅ Migration check passed"
  fi
else
  echo "ℹ️ Migration check script not found, skipping"
fi

# Version validation - more sophisticated check
if [ -f "version.json" ]; then
  # Check if we're modifying files that would require version update
  VERSION_CRITICAL_PATHS=("app/" "database/" "resources/" "routes/" "config/")
  VERSION_IGNORED_PATHS=("storage/" "tests/" ".git/")
  CRITICAL_CHANGED=false
  
  # Check if any critical files are being changed
  for path in "${VERSION_CRITICAL_PATHS[@]}"; do
    if git diff --cached --name-only | grep -q "^$path"; then
      CRITICAL_CHANGED=true
      break
    fi
  done
  
  # Skip check if only ignored paths are changed
  if [ "$CRITICAL_CHANGED" = true ]; then
    IGNORED_ONLY=true
    for file in $(git diff --cached --name-only); do
      IGNORED=false
      for path in "${VERSION_IGNORED_PATHS[@]}"; do
        if [[ "$file" == $path* ]]; then
          IGNORED=true
          break
        fi
      done
      
      if [ "$IGNORED" = false ]; then
        IGNORED_ONLY=false
        break
      fi
    done
    
    if [ "$IGNORED_ONLY" = false ] && [ -z "$(git diff --cached --name-only | grep "version.json")" ]; then
      echo "⚠️ Warning: Changes to critical paths detected but version.json not updated"
      read -p "Continue anyway? (y/n) " -n 1 -r
      echo
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "❌ Version validation failed"
        EXIT_STATUS=1
      fi
    fi
  fi
fi

# Check if commit message includes a roadmap reference when needed
if [ -f "roadmap.json" ]; then
  COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
  TEMP_COMMIT_MSG_FILE=".git/COMMIT_MSG_TEMP"
  
  # Check if a temporary file exists (for when this hook has already run)
  if [ -f "$TEMP_COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(cat "$TEMP_COMMIT_MSG_FILE")
  elif [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
  fi
  
  # Check if commit message includes a reference when touching feature paths
  FEATURE_PATHS=("app/" "resources/js/" "resources/views/")
  FEATURE_PATH_CHANGED=false
  
  for path in "${FEATURE_PATHS[@]}"; do
    if git diff --cached --name-only | grep -q "^$path"; then
      FEATURE_PATH_CHANGED=true
      break
    fi
  done
  
  if [ "$FEATURE_PATH_CHANGED" = true ] && ! echo "$COMMIT_MSG" | grep -q "\[REF:"; then
    echo "⚠️ Warning: Feature paths changed but commit message lacks reference"
    echo "Add roadmap reference like [REF:P1-SETUP] to your commit message"
    
    # Prompt to add a reference
    CURRENT_PHASE=$(jq -r '.current_phase' roadmap.json 2>/dev/null)
    if [ -n "$CURRENT_PHASE" ] && [ "$CURRENT_PHASE" != "null" ]; then
      read -p "Add current phase reference [$CURRENT_PHASE] to commit message? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        UPDATED_MSG="$COMMIT_MSG [REF:$CURRENT_PHASE]"
        echo "$UPDATED_MSG" > "$TEMP_COMMIT_MSG_FILE"
        echo "ℹ️ Reference added to commit message"
      fi
    else
      echo "❌ No current phase found in roadmap.json"
    fi
  fi
fi

# Perform code quality checks if PHP_CodeSniffer is available
if command -v phpcs &> /dev/null && [ -f "artisan" ]; then
  echo "Running code quality checks..."
  
  # Only check staged files for performance
  STAGED_PHP_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "\.php$")
  
  if [ -n "$STAGED_PHP_FILES" ]; then
    echo "$STAGED_PHP_FILES" | xargs phpcs --standard=PSR12 2>/dev/null
    
    PHPCS_STATUS=$?
    if [ $PHPCS_STATUS -ne 0 ]; then
      echo "⚠️ Code quality issues detected"
      read -p "Continue anyway? (y/n) " -n 1 -r
      echo
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "❌ Code quality check failed"
        EXIT_STATUS=1
      fi
    else
      echo "✅ Code quality check passed"
    fi
  else
    echo "ℹ️ No PHP files staged, skipping code quality check"
  fi
fi

if [ $EXIT_STATUS -ne 0 ]; then
  echo "❌ Pre-commit validation failed"
else
  echo "✅ Pre-commit validation passed"
fi

exit $EXIT_STATUS 